172. WAP to create and display Singly Linked List
#include<stdio.h>
struct student{
int roll;
struct student *next;
};

int main()
{
      struct student *head=malloc(sizeof(struct student));
      struct student *currptr=head;
      currptr->roll=12;
      currptr->next=malloc(sizeof(struct student));

      currptr=currptr->next;
      currptr->roll=14;
      currptr->next=malloc(sizeof(struct student));

      currptr=currptr->next;
      currptr->roll=16;
      currptr->next=NULL;

      currptr=head;

      while(1)
      {
          if(currptr)
          {
              printf("%d\n",currptr->roll);
              currptr=currptr->next;
          }
          else
            break;
      }

      return 0;
}

P173. add element at the a)starting & b)ending
a)
#include<stdio.h>
struct add{
int num;
struct add *next;
};

int main()
{
    struct add *head=malloc(sizeof(struct add));
    struct add *curptr=head;
    curptr->num=100;
    curptr->next=malloc(sizeof(struct add));

    curptr=curptr->next;
    curptr->num=200;
    curptr->next=NULL;

    struct add *temp=head;
    head=malloc(sizeof(struct add));
    curptr=head;

    curptr->num=300;
    curptr->next=temp;

    curptr=head;

    while(1)
    {
        if(curptr)
        {
            printf("%d\n",curptr->num);
            curptr=curptr->next;
        }
        else
            break;
    }
    return 0;
}

b)
#include<stdio.h>
struct add{
int num;
struct add *next;
};

int main()
{
    struct add *head=malloc(sizeof(struct add));
    struct add *curptr=head;
    curptr->num=100;
    curptr->next=malloc(sizeof(struct add));

    curptr=curptr->next;
    curptr->num=200;
    curptr->next=malloc(sizeof(struct add));

      curptr=curptr->next;
    curptr->num=300;
    curptr->next=NULL;

    curptr=head;

    while(1)
    {
        if(curptr)
        {
            printf("%d\n",curptr->num);
            curptr=curptr->next;
        }
        else
            break;
    }
    return 0;
}

P174. Insert node at nth position
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct employee
{
    int serial_number;
    char name[20];
    struct employee *next;
};
int main()
{
    struct employee *head;
    head=malloc(sizeof(struct employee));

    struct employee *current=head;
    current->serial_number=10;
    strcpy(current->name,"rushabh");
    current->next=malloc(sizeof(struct employee));

    current=current->next;
    current->serial_number=12;
    strcpy(current->name,"rohan");
    current->next=malloc(sizeof(struct employee));

    current =current->next;
    current->serial_number=16;
    strcpy(current->name,"karthik");
    current->next=NULL;

    current=head;
    while(1)
    {
        if(current)
        {
            printf("%s is %d\n",current->name,current->serial_number);
            current=current->next;
        }
        else
            break;
    }

    printf("Enter the position: ");
    int position;
    scanf("%d",&position);
    int count=1;
    current=head;

//    if(position==1)
//    {
//    struct employee *add=head;
//    head=malloc(sizeof(struct employee));
//    current=head;
//    current->serial_number=23;
//    strcpy(current->name,"ramesh");
//    current->next=add;
//    }

    while(count+1<position)
    {
        current=current->next;
        count++;
    }

    struct employee *add=current->next;
    current->next=malloc(sizeof(struct employee));
    current=current->next;
    current->serial_number=23;
    strcpy(current->name,"ramesh");
    current->next=add;

    current=head;
    while(1)
    {
        if(current)
        {
            printf("%s is %d\n",current->name,current->serial_number);
            current=current->next;
        }
        else
            break;
    }
    return 0;
}

P175. Delete node at nth position
#include<stdio.h>
#include<stdlib.h>
struct student
{
    char name[20];
    int roll;
    struct student *next;
};
int main()
{
    int count=1,num;
    printf("Enter the count:");
    scanf("%d",&num);
    struct student *head=malloc(sizeof(struct student));
    struct student *current=head;
    printf("Enter the roll number: ");
    scanf("%d",&current->roll);
    printf("Enter the name: ");
    scanf("%s",current->name);

    while(count<num)
    {
        current->next=malloc(sizeof(struct student));
        current=current->next;

        printf("Enter the roll number: ");
        scanf("%d",&current->roll);
        printf("Enter the name: ");
        scanf("%s",current->name);
        count++;
    }

    current->next=NULL;
    current=head;

    while(1)
    {
        if(current)
        {
            printf("%s is %d\n",current->name,current->roll);
            current=current->next;
        }
        else
            break;
    }

    printf("Enter the position: ");
    int position;
    scanf("%d",&position);
    count=1;

    current=head;
    while(count<position)
    {
        current=current->next;
        count++;
    }

    struct student *add=current->next;
    free(current);

    count=1;
    current=head;
    while(count+1<position)
    {
        current=current->next;
        count++;
    }
    current->next=add;

    current=head;
    while(1)
    {
        if(current)
        {
            printf("%s is %d\n",current->name,current->roll);
            current=current->next;
        }
        else
            break;
    }
    return 0;
}

P177. Create & display stacck using linked list
#include<stdio.h>

struct student{
int roll;
struct student *below;
};

int main()
{
    struct student *head=malloc(sizeof(struct student));
    struct student *curptr=head;
    curptr->roll=100;
    curptr->below=NULL;

    struct student *temp=head;
    head=malloc(sizeof(struct student));
    curptr=head;
    curptr->roll=200;

    curptr->below=temp;

    curptr=curptr->below;

    curptr=head;
    while(1)
    {
        if(curptr)
        {
            printf("%d\n",curptr->roll);
            curptr=curptr->below;
        }
        else
            break;
    }
}

P178. Push-Pop on stack used linked list
#include<stdio.h>
struct stack
{
    int val;
    struct stack *link;
};
struct stack *top=NULL;
void push(int x);
void display(void);
void pop(void);

int main()
{
    push(2);
    push(3);
    push(4);
    display();
    pop();
    display();

    return 0;
}
void push(int x)
{
    struct stack *newnode=malloc(sizeof(struct stack));
    newnode->val=x;
    newnode->link=top;
    top=newnode;
}
void display(void)
{
    struct stack *curr=top;
    while(curr!=NULL)
    {
        printf("%d\n",curr->val);
        curr=curr->link;
    }
}
void pop(void)
{
    printf("After popping top node :\n");
    struct stack *curr=top;
    top=top->link;
    free(curr);
}
